<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kategorie: jenkins | Prskavčí blog]]></title>
  <link href="http://blog.prskavec.net/categories/jenkins/atom.xml" rel="self"/>
  <link href="http://blog.prskavec.net/"/>
  <updated>2016-12-20T17:11:47+01:00</updated>
  <id>http://blog.prskavec.net/</id>
  <author>
    <name><![CDATA[Ladislav Prskavec]]></name>
    <email><![CDATA[ladislav@prskavec.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkins Declarative Pipelines]]></title>
    <link href="http://blog.prskavec.net/2016/12/jenkins-declarative-pipelines/"/>
    <updated>2016-12-20T16:52:00+01:00</updated>
    <id>http://blog.prskavec.net/2016/12/jenkins-declarative-pipelines</id>
    <content type="html"><![CDATA[<p>Dnes Jenkins <a href="https://jenkins.io/blog/2016/12/19/declarative-pipeline-beta/">zveřejnil betu</a> nového formátu pro popis Continues Delivery Pipelines.</p>

<p>Pipeline se serie kroků, které vám dovolí orchestovat práci, kterou potřebujete k buildu, testovaní a nasazení aplikace. Pipelines jsou definovány v souboru <code>Jenkinsfile</code> a je uložen v
kořenovém adresáři repozitáře projektu.</p>

<!-- more -->


<p>Stávájící formát pipelines je psaný v Groovy DSL a vypadá takto:</p>

<p>```groovy
node {
   stage(&lsquo;Preparation&rsquo;) {</p>

<pre><code>  git 'https://github.com/abtris/bee.git'
  poll: true
</code></pre>

<p>   }
   stage(&lsquo;Deps&rsquo;) {</p>

<pre><code>   env.PACKAGE="github.com/abtris/bee"
   env.GOPATH="/Users/abtris/go"
   env.GOROOT="/usr/local/opt/go/libexec"
   sh 'glide --no-color install'
   sh 'mkdir -p release'
</code></pre>

<p>   }
   stage(&lsquo;Test&rsquo;) {</p>

<pre><code>   sh 'make xunit'
</code></pre>

<p>   }
   stage(&lsquo;Build&rsquo;) {</p>

<pre><code>     parallel (
        linux64: { sh "GOOS=linux GOARCH=amd64 go build -o release/bee-linux-amd64 ${PACKAGE}" },
        linux32: { sh "GOOS=linux GOARCH=386 go build -o release/bee-linux-386 ${PACKAGE}" },
        mac64: { sh "GOOS=darwin GOARCH=amd64 go build -o release/bee-darwin-amd64 ${PACKAGE}" },
        win64: { sh "GOOS=windows GOARCH=amd64 go build -o release/bee-windows-amd64 ${PACKAGE}" }
      )
</code></pre>

<p>   }
   stage(&lsquo;Results&rsquo;) {</p>

<pre><code>  archive 'release/*'
  junit 'tests.xml'
</code></pre>

<p>   }
}
```</p>

<p>a nový formát zjednodušuje tento zápis i pro ty kteří Groovy nevládnou a je více deklarativní s podporou pro editor, který Jenkins Blue Ocean tým vyvíjí.</p>

<p>Tady je přepsaný příklad ze shora do nového formátu.</p>

<p>```groovy
pipeline {
  agent any
  environment {</p>

<pre><code>PACKAGE="github.com/abtris/bee"
GOPATH="/Users/abtris/go"
GOROOT="/usr/local/opt/go/libexec"
</code></pre>

<p>  }
  stages {</p>

<pre><code> stage('Preparation') {
    steps {
      git 'https://github.com/abtris/bee.git'
    }
 }
 stage('Deps') {
    steps {
       sh 'glide --no-color install'
       sh 'mkdir -p release'
   }
 }
 stage('Test') {
    steps {
     sh 'make xunit'
    }
 }
 stage('Build') {
    steps {
       parallel (
          linux64: { sh "GOOS=linux GOARCH=amd64 go build -o release/bee-linux-amd64 ${PACKAGE}" },
          linux32: { sh "GOOS=linux GOARCH=386 go build -o release/bee-linux-386 ${PACKAGE}" },
          mac64: { sh "GOOS=darwin GOARCH=amd64 go build -o release/bee-darwin-amd64 ${PACKAGE}" },
          win64: { sh "GOOS=windows GOARCH=amd64 go build -o release/bee-windows-amd64 ${PACKAGE}" }
        )
    }
 }
 stage('Results') {
    steps {
      archive 'release/*'
      junit 'tests.xml'
    }
 }
</code></pre>

<p>  }
}
```</p>

<p>Celou syntaxi si můžete prohlédnout <a href="https://github.com/jenkinsci/pipeline-model-definition-plugin/blob/master/SYNTAX.md">v dokumentaci</a>.</p>

<p>Hlavní rozdíl je v tom, že přidali další bloky jako je hlavní <code>pipelines</code> a je potřeba deklarovat vždy agenta, který může být v různém formátu. Taky se vyměnilo nazvosloví a z <code>node</code> je vlastně <code>agent</code>. Můžete pustit celý byl jednoduše například v dockeru pomocí: <code>agent docker:'node:6.3'</code> nebo pokud nechcete to řešit tak můžete dát <code>agent any</code> jako já, co se hodí například pro lokální testování a není to rozhodně vhodné pro nějaké větší nasazení, kdy potřebujete orchestrovat jednotlivé agenty. Deklarace <code>environment</code> na začátku zpřehledňuje celý zápis. Každá <code>stage</code> má teď <code>steps</code>, které dřívě nebyli.</p>

<p>I když celý tento projekt v beta fázi, přijde mi to jako krok správným směrem a spolu s čím dál lepším <a href="https://jenkins.io/blog/2016/05/26/introducing-blue-ocean/">Blue Ocean</a> to bude příští rok hlavní novinka v Jenkinsu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins 2.0 - novinky a vylepšení - 2.část]]></title>
    <link href="http://blog.prskavec.net/2016/10/jenkins-2-dot-0-novinky-a-vylepseni-2-dot-cast/"/>
    <updated>2016-10-31T10:26:00+01:00</updated>
    <id>http://blog.prskavec.net/2016/10/jenkins-2-dot-0-novinky-a-vylepseni-2-dot-cast</id>
    <content type="html"><![CDATA[<p>V minulé části jsem probíral proč je důležité mít definice v souboru a proč potřebujeme Continues Delivery Pipelines.</p>

<p>V tomto příspěvku se budu věnovat dalším bodům:</p>

<ul>
<li>distributed job across multiple nodes</li>
<li>autoscaling on traffic with lowest possible price</li>
<li>solution for caching for installations</li>
<li>docker support</li>
<li>matrix builds</li>
</ul>


<p>V Jenkinsu je podpora pro distribuované agenty, dnes můžete mít jednotlivé stroje v AWS (pomocí ec2, ec2-fleet pluginů), OpenStack, Docker, Kubernetes apod.</p>

<p>Aby jste byli schopni dosáhnou kvalitního autoscalingu za velmi dobrou cenu dají se velmi dobře využít <a href="https://aws.amazon.com/ec2/spot/">spot instance</a> od AWS. Můžete ušetřit až 90% nákladů oproti normálním instancím.</p>

<!-- more -->


<p>Pokud provozujete vlastní Jenkins je potřeba vyřešit cache, ideální řešení je <a href="https://www.jfrog.com/artifactory/">JFrog Artifactory</a>, které podporuje caching pro velké množství vývojových nástrojů. Bohužel toto řešení poměrně drahé. Ale existuje <a href="http://www.sonatype.org/nexus/">Nexus repository</a>, které má komunitní verzi. Ale bohužel v Nexus OSS chybí například podpora pro PHP Composer.</p>

<p>Matrix buildy jsou potřeba v Jenkinsu se jim říká Multi-configuration project. Můžete tu vytvořit vlatní matice podle čeho chcete a Jenkins vygeneruje potřebné projekty s parametry které potřebujete, podobně jako když by jste použili <a href="https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin">Job DSL plugin</a>. To se hodí od testovaní různých verzí operačního systému, verzí programovacího jazyka apod.</p>

<p>Poslední věc je podpora Dockeru. V Jenkinsu je několik pluginů pro Docker. Využití může být také různé. Buď to použijete na vytvoření agentů nebo přímo můžete pouštět projekt v docker containeru. Bohužel toto funguje spolehlivě jen na linuxu.</p>

<p>Takto se docker popíše v Jenkins pipelines.</p>

<p><code>groovy
node('docker') {
 // My project sources include both build.xml and a Dockerfile to run it in.
 git 'https://git.mycorp.com/myproject.git'
 // Ready?
 docker.build('mycorp/ant-qwerty:latest').inside {
   sh 'ant dist-package'
 }
 archive 'app.zip'
}
</code></p>

<p>Hostované řešení jako je TravisCI nebo CircleCI mají výhodu pokud potřebujete začít. Ale postupem, když máte více lidí nebo potřebujete větší flexibilitu tak se můžete dostat do potíží. Jenkins je náročnější na údržbu, ale umožňuje velkou flexibilitu.</p>

<h2>Shrnutí</h2>

<p>Jenkins 2 přinesl deklarativní popis, lepší bezpečnost a stále zachoval zpětnou kompatibilitu. Vylepšené UI a tady se stále pracuje na dalších vylepšeních (Blue Ocean). S Blue Ocean potom přijde deklarativní popis continues delivery pipelines a také by měl tam být online visual editor pro pipelines. Na další rok mají plány také na přidání Configuration API a myslím, že by mohl Blue Ocean v budoucnu uplně nahradit dnešní UI a zároveň otevřít cestu pro to například kompletně používat Jenkins bez UI. Uvidíme jak to bude dlouho trvat, každopádně se už teď těším na další novinky.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins 2.0 - novinky a vylepšení]]></title>
    <link href="http://blog.prskavec.net/2016/10/jenkins-2-dot-0-novinky-a-vylepseni/"/>
    <updated>2016-10-26T19:02:00+02:00</updated>
    <id>http://blog.prskavec.net/2016/10/jenkins-2-dot-0-novinky-a-vylepseni</id>
    <content type="html"><![CDATA[<p>Jenkins je nejznámější řešení na Continues Integration, který existuje už řadu let. Od září je venku konečně verze 2.x (aktuálně 2.19.1 LTS), která obsahuje několik zásadních novinek.</p>

<p>Jenkins používám řadu let a také ho <a href="/skoleni-a-kurzy/">školím ve firmách</a> co chtějí toto řešení nasadit. Před 2 lety jsem si řekl, že není Jenkins moc dobrá cesta. Žádné použitelné novinky se dlouho neobjevovali a vůbec se nezlepšovalo použití pro větší nasazení Jenkinusů ve firmách.</p>

<!-- more -->


<p>Já mám na každé CI tento seznam požadavků:</p>

<ul>
<li>job definitions in repository</li>
<li>autoscaling on traffic with lowest possible price</li>
<li>pipelines / workflow</li>
<li>solution for caching for installations</li>
<li>docker support</li>
<li>matrix builds</li>
<li>distributed job across multiple nodes</li>
</ul>


<p>a hned ten nejzásadnější právě dlouho Jenkins nesplňoval. Od verze 2.0 je mezi základními rozšířeními podpora pro Continues Delivery Pipelines (dále jen pipelines), které jdou psát do souboru jako <code>Jenkinsfile</code>, který můžete mít s projektem v repozitáři a Jenkins umí spolupracovat s SCM například s Github, kde mu stačí dát jméno organizace nebo uživatele a on proskenuje vaše repositáře a tam kde najde <code>Jenkinsfile</code> pro ty repositáře vytvoří úlohy ke zpracování.</p>

<p>Ukázka jak takový soubor s pipelines vypadá pro malý projekt.</p>

<p>```groovy
node {
   stage(&lsquo;Preparation&rsquo;) {</p>

<pre><code>  git 'https://github.com/abtris/bee.git'
</code></pre>

<p>   }
   stage(&lsquo;Deps&rsquo;) {</p>

<pre><code>   env.PACKAGE="github.com/abtris/bee"
   env.GOPATH="~/go"
   env.GOROOT="/usr/local/opt/go/libexec"
   sh 'glide --no-color install'
   sh 'mkdir -p release'
</code></pre>

<p>   }
   stage(&lsquo;Test&rsquo;) {</p>

<pre><code>   sh 'make xunit'
</code></pre>

<p>   }
   stage(&lsquo;Build&rsquo;) {</p>

<pre><code>     parallel (
        linux64: { sh "goos=linux goarch=amd64 make build" },
        linux32: { sh "goos=linux goarch=386 make build" },
        mac64: { sh "goos=darwin goarch=amd64 make build" },
        win64: { sh "goos=windows goarch=amd64 make build" }
      )
</code></pre>

<p>   }
   stage(&lsquo;Results&rsquo;) {</p>

<pre><code>  archive 'release/*'
  junit 'tests.xml'
</code></pre>

<p>   }
}
<code>``
Jenkinsfile je [DSL](https://en.wikipedia.org/wiki/Domain-specific_language) v programovacím jazyku [Groovy](http://www.groovy-lang.org) obsahuje blok s názvem</code>node` kde si definujete, kde a co se má co spouštět. V ukázce tam není žádná podmínka a tak Jenkins rozhodně sám kde to spustí. Pokud by jste to chtěli upřesnit tak se dá se specifikovat zda to má být master nebo naopak, že to nemá být master (doporučeno) a také jde přímo označit agenta (slave), kterého máte připojeného k Jenkins masteru. Může to být instance na Amazon Web Services (AWS) nebo v jiném cloudu, tak jakýkoliv jiný počítač, který si k tomu určíte a pustíte na něm potřebného klienta.</p>

<p>Další klíčovým slovem je <code>stage</code>, kde si názvem rozdělíme pipeline do nějakých logických celků. Tyto části, pokud to má smysl, můžeme zpracovávat paralelně jako je to v ukázce v části <code>Build</code>. Využití paralelního zpracování je tam, kde chcete zkrátit čas celého build a pokud na to máte volné prostředky (agenty).</p>

<p>Vše spouštím pomocí linuxového shellu pomocí klíčového slova <code>sh</code>. Mohl bych testovat pomocí <code>isUnix()</code> zda jsme na stroji, který toho je vůbec schopen, to vám pomůže pokud používáte různé stroje, některé s Windows a jiné s Linuxem.</p>

<p>V poslední části <code>Results</code> archivujeme artefakty (tady binárné soubory) vytvořené při buildu a výsledky testů z kroku <code>Test</code>.</p>

<p>To je vše a v Jenkinsu to potom vypadá takto:</p>

<p><img src="/images/jenkins/pipelines-parallel.png" alt="" /></p>

<p>Takto se pipelines zobrazují v novém UI BlueOcean.</p>

<p>Pipelines mají před sebou velkou budoucnost, připravují se vylepšení v podobě online editoru a více deklarativního zápisu než dnes.</p>

<p>Dalším požadavkům, které mám na CIE se budu věnovat zase v dalším příspěvku.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins polling a git-notify]]></title>
    <link href="http://blog.prskavec.net/2013/09/jenkins-polling-a-git-notify/"/>
    <updated>2013-09-05T10:01:00+02:00</updated>
    <id>http://blog.prskavec.net/2013/09/jenkins-polling-a-git-notify</id>
    <content type="html"><![CDATA[<p>Minulý rok jsem psal o tom, že <a href="http://blog.prskavec.net/2012/06/jenkins-scm-polling-je-zlo/">polling v Jenkinsu je zlo</a>. To stále platí, ale i když máte tento přístup nemusí to stačit.</p>

<!--more-->


<p>Tady je příklad hooku pro gitolite, který používáme na některých repository.</p>

<p><div><script src='https://gist.github.com/5625369.js'></script>
<noscript><pre><code>#!/bin/bash

NOBOLD=&quot;\033[0m&quot;
BOLD=&quot;\033[1m&quot;
BLACK=&quot;\033[30m&quot;
GREY=&quot;\033[0m&quot;
RED=&quot;\033[31m&quot;
GREEN=&quot;\033[32m&quot;
YELLOW=&quot;\033[33m&quot;
BLUE=&quot;\033[34m&quot;
MAGENTA=&quot;\033[35m&quot;
CYAN=&quot;\033[36m&quot;
WHITE=&quot;\033[37m&quot;

# V +1007

# Peff helped:
# http://thread.gmane.org/gmane.comp.version-control.git/118626

syntax_check=&quot;xmllint --noout &quot;
tmp=$(mktemp /tmp/git.update.XXXXXX)
log=$(mktemp /tmp/git.update.log.XXXXXX)
tree=$(mktemp /tmp/git.diff-tree.XXXXXX)

git diff-tree -r &quot;$2&quot; &quot;$3&quot; &gt; $tree
 
echo
echo diff-tree:
cat $tree

exit_status=0

while read old_mode new_mode old_sha1 new_sha1 status name
do
  # skip lines showing parent commit
  test -z &quot;$new_sha1&quot; &amp;&amp; continue
  # skip deletions
  [ &quot;$new_sha1&quot; = &quot;0000000000000000000000000000000000000000&quot; ] &amp;&amp; continue
  # check all files for unmerged signs
    mergefail=`git cat-file blob $new_sha1 | grep -e &quot;^&lt;&lt;&lt;&lt;&lt;&lt;&quot; -e &quot;^&gt;&gt;&gt;&gt;&gt;&gt;&quot;`
    if [[ &quot;$mergefail&quot; != &quot;&quot; ]]
    then
      echo
      echo &quot;umerged file $name&quot; &gt;&amp;2
      echo &quot;$mergefail&quot; &gt;&amp;2
      echo
      exit_status=1
    fi

  # Only test .xml, xsl(t)? files
  if [[ $name =~ [.]xml$|xsl(t)?$ ]]
  then
    git cat-file blob $new_sha1 &gt; $tmp
    set -o pipefail
    $syntax_check $tmp 2&gt;&amp;1 | sed &#39;s|/tmp/git.update.......:\([0-9]*\)$|JOJOMOJO:\1|&#39;&gt; $log
    if [[ $? != 0 ]]
    then
      echo
      echo -e &quot;$(cat $log | sed &#39;s|JOJOMOJO|&#39;\\${RED}${name}\\${NOBOLD}&#39;|&#39;)&quot; &gt;&amp;2
      echo -e &quot;For more details run this: ${CYAN} git diff $old_sha1 $new_sha1 ${NOBOLD}&quot; &gt;&amp;2
      echo
      exit_status=1
    fi
  fi

  # CRLF check only java, xml
  if [[ $name =~ [.]java$|xml$ ]]
  then  
    git cat-file blob $new_sha1 &gt; $tmp
    RESULT=`grep -Pl &#39;\r\n&#39; $tmp`
    echo $RESULT
    if [ &quot;$RESULT&quot; = &quot;$tmp&quot; ]; then
          echo &quot;###################################################################################################&quot; &gt;&amp;2
          echo &quot;# &#39;$name&#39; contains CRLF! Dear Windows developer, please activate the GIT core.autocrlf feature,&quot; &gt;&amp;2
          echo &quot;# or change the line endings to LF before trying to push.&quot; &gt;&amp;2
          echo &quot;# Use &#39;git config core.autocrlf true&#39; to activate CRLF conversion.&quot; &gt;&amp;2
          echo &quot;# OR use &#39;git reset HEAD~1&#39; to undo your last commit and fix the line endings.&quot; &gt;&amp;2
          echo &quot;###################################################################################################&quot; &gt;&amp;2
          exit_status=1
    fi  
  fi

done &lt; $tree

# jenkins polling
branch=$(git rev-parse --symbolic --abbrev-ref $1)
escaped_branch=$(echo $branch | sed s:/:%2F:g)

refname=&quot;$1&quot;
oldrev=&quot;$2&quot;
newrev=&quot;$3&quot;
# --- Check types
# if $newrev is 0000...0000, it&#39;s a commit to delete a ref.
zero=&quot;0000000000000000000000000000000000000000&quot;
if [ &quot;$newrev&quot; = &quot;$zero&quot; ]; then
  newrev_type=delete
else
  newrev_type=$(git cat-file -t $newrev)
fi
skip_notify=0
echo &quot;$refname $newrev_type&quot; &gt;&amp;2
case &quot;$refname&quot;,&quot;$newrev_type&quot; in
  refs/tags/*,delete)
    # delete tag
    skip_notify=1
    echo &quot;Delete tag&quot; &gt;&amp;2
    ;;
  refs/heads/*,delete)
    # delete branch
    skip_notify=1
    echo &quot;Delete branch&quot; &gt;&amp;2
    ;;
  refs/remotes/*,delete)
    # delete tracking branch
    skip_notify=1
    echo &quot;Delete tracking branch&quot; &gt;&amp;2
    ;;
  *)
esac
if [[ &quot;$skip_notify&quot; == &quot;0&quot; ]]
then
  REPOSITORY_BASENAME=$(basename &quot;$PWD&quot;)
  curl &quot;http://jenkins.firma.cz/git/notifyCommit?url=ssh://git@git.firma.cz/$REPOSITORY_BASENAME&amp;branch=$escaped_branch&quot;
fi

rm -f $log $tmp $tree
exit $exit_status

</code></pre></noscript></div>
</p>

<p>Občas je potřeba notifikovat jen větev, která se změní, aby to nepustilo zbytečně joby, kde změny neproběhli.</p>

<p>Nejdůležitější části, jsou detekce větve, escape lomítka ve jménech větve.</p>

<pre><code>branch=$(git rev-parse --symbolic --abbrev-ref $1)
escaped_branch=$(echo $branch | sed s:/:%2F:g)
</code></pre>

<p>potom vlastní git-notify volání curlem.</p>

<pre><code>REPOSITORY_BASENAME=$(basename "$PWD")
curl "http://jenkins.firma.cz/git/notifyCommit?url=ssh://git@git.firma.cz/$REPOSITORY_BASENAME&amp;branch=$escaped_branch"
</code></pre>

<p>Snad to bude někomu užitečné také, pokud si chcete o Jenkinsu popovídat <a href="http://blog.prskavec.net/skoleni/">více, dejte vědět</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins SCM polling je zlo!]]></title>
    <link href="http://blog.prskavec.net/2012/06/jenkins-scm-polling-je-zlo/"/>
    <updated>2012-06-20T18:54:00+02:00</updated>
    <id>http://blog.prskavec.net/2012/06/jenkins-scm-polling-je-zlo</id>
    <content type="html"><![CDATA[<p>Moc jsem nechápal problémy, které řešil <a href="http://kohsuke.org/2011/12/01/polling-must-die-triggering-jenkins-builds-from-a-git-hook/">Kohsuke Kawaguchi</a> na konci roku. Ale brzo jsem to měl zjistit. Před časem přišel za mnou kolega, že chce zkonfigurovat polling stylem popisovaným v článku.</p>

<!--more-->


<p>Polling jsme nastavili na 1x24h a máme git-update hook, který nám polling spustí po kommitu, kdy je potřeba. Ukázka git-update skriptu.</p>

<p>```</p>

<pre><code>REPOSITORY_BASENAME=$(basename "$PWD") 
curl http://jenkins.firma.cz/jenkins/git/notifyCommit?url=ssh://git@git.firma.cz/$REPOSITORY_BASENAME
</code></pre>

<p>```</p>

<p>V poslední době nám performace jenkins serveru začala klesat a load serveru prudce stoupat. Začali jsme to řešit pomocí dalších volných strojů, které se k jenkins masteru připojovali jako slave node. Úspěšně jsme si vyzkoušeli na to použití pluginu <a href="https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin">swarm</a>, který můžu doporučit. Vytvořili jsme RPM balík, který nainstalujeme na volný stroj a swarm se připojí k masteru a je plně nakonfigurovaný a k dispozici. Důležité je jen mít na slave nodes dost diskového prostoru, protože joby jsou dost často velké, obzvláště pokud jich máte velký počet.</p>

<p>Abych se vrátil k SCM pollingu. Naši systémaci udělali analýzu nejvytíženějších repository v Gitu. A data mám udávají čas spotřebovaný na provedení všech činností po dobu 14 dní. Na grafu je vidět přehled podle repository.</p>

<p><img class="center" src="/images/scmpolling/graph-01.png" title="&lsquo;Prehled repository podle casu&rsquo;" ></p>

<p>V dalším grafu je vidět potom rozložení podle zátěže jednotlivými klienty, jak stroji (převážně jenkins a slave nodes, uživatelé jsou v minoritě).</p>

<p><img class="center" src="/images/scmpolling/graph-02.png" title="&lsquo;Prehled repository podle uzivatele&rsquo;" ></p>

<p>Poslední graf ukazuje počet přístupů do jednotlivých repository. Je potřeba podle toho upravit joby a jejich SCM polling.</p>

<p><img class="center" src="/images/scmpolling/graph-03.png" title="&lsquo;Prehled repository podle poctu pristupu&rsquo;" ></p>

<p>Na hromadné změny SCM pollingu můžete úspěšně použít <a href="https://wiki.jenkins-ci.org/display/JENKINS/Configuration+Slicing+Plugin">Configuration Slicing Plugin</a>, který vám práci usnadní. U nějvíce vytížených repository doporučili použít notifikace pomocí git-update hooku, případně to můžete udělat všude.</p>

<p>Výsledná zátěž stroje potom výrazně klesla potom co jsme upravili nastavení jak je vidět z grafů muninu.</p>

<p><img class="center" src="/images/scmpolling/graph-04.png" title="&lsquo;Prehled z munina&rsquo;" ></p>

<p>Další doporučení a tipy triky z praxe se dozvíte na mém školení <a href="http://bit.ly/k-ci">Jenkins &ndash; jak na Continuous Integration v PHP a Javascriptu</a>.</p>
]]></content>
  </entry>
  
</feed>
