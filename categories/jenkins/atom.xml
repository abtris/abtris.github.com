<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kategorie: jenkins | Prskavčí blog]]></title>
  <link href="http://blog.prskavec.net/categories/jenkins/atom.xml" rel="self"/>
  <link href="http://blog.prskavec.net/"/>
  <updated>2016-06-09T10:48:50+02:00</updated>
  <id>http://blog.prskavec.net/</id>
  <author>
    <name><![CDATA[Ladislav Prskavec]]></name>
    <email><![CDATA[ladislav@prskavec.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkins polling a git-notify]]></title>
    <link href="http://blog.prskavec.net/2013/09/jenkins-polling-a-git-notify/"/>
    <updated>2013-09-05T10:01:00+02:00</updated>
    <id>http://blog.prskavec.net/2013/09/jenkins-polling-a-git-notify</id>
    <content type="html"><![CDATA[<p>Minulý rok jsem psal o tom, že <a href="http://blog.prskavec.net/2012/06/jenkins-scm-polling-je-zlo/">polling v Jenkinsu je zlo</a>. To stále platí, ale i když máte tento přístup nemusí to stačit.</p>

<!--more-->


<p>Tady je příklad hooku pro gitolite, který používáme na některých repository.</p>

<p><div><script src='https://gist.github.com/5625369.js'></script>
<noscript><pre><code>#!/bin/bash

NOBOLD=&quot;\033[0m&quot;
BOLD=&quot;\033[1m&quot;
BLACK=&quot;\033[30m&quot;
GREY=&quot;\033[0m&quot;
RED=&quot;\033[31m&quot;
GREEN=&quot;\033[32m&quot;
YELLOW=&quot;\033[33m&quot;
BLUE=&quot;\033[34m&quot;
MAGENTA=&quot;\033[35m&quot;
CYAN=&quot;\033[36m&quot;
WHITE=&quot;\033[37m&quot;

# V +1007

# Peff helped:
# http://thread.gmane.org/gmane.comp.version-control.git/118626

syntax_check=&quot;xmllint --noout &quot;
tmp=$(mktemp /tmp/git.update.XXXXXX)
log=$(mktemp /tmp/git.update.log.XXXXXX)
tree=$(mktemp /tmp/git.diff-tree.XXXXXX)

git diff-tree -r &quot;$2&quot; &quot;$3&quot; &gt; $tree
 
echo
echo diff-tree:
cat $tree

exit_status=0

while read old_mode new_mode old_sha1 new_sha1 status name
do
  # skip lines showing parent commit
  test -z &quot;$new_sha1&quot; &amp;&amp; continue
  # skip deletions
  [ &quot;$new_sha1&quot; = &quot;0000000000000000000000000000000000000000&quot; ] &amp;&amp; continue
  # check all files for unmerged signs
    mergefail=`git cat-file blob $new_sha1 | grep -e &quot;^&lt;&lt;&lt;&lt;&lt;&lt;&quot; -e &quot;^&gt;&gt;&gt;&gt;&gt;&gt;&quot;`
    if [[ &quot;$mergefail&quot; != &quot;&quot; ]]
    then
      echo
      echo &quot;umerged file $name&quot; &gt;&amp;2
      echo &quot;$mergefail&quot; &gt;&amp;2
      echo
      exit_status=1
    fi

  # Only test .xml, xsl(t)? files
  if [[ $name =~ [.]xml$|xsl(t)?$ ]]
  then
    git cat-file blob $new_sha1 &gt; $tmp
    set -o pipefail
    $syntax_check $tmp 2&gt;&amp;1 | sed 's|/tmp/git.update.......:\([0-9]*\)$|JOJOMOJO:\1|'&gt; $log
    if [[ $? != 0 ]]
    then
      echo
      echo -e &quot;$(cat $log | sed 's|JOJOMOJO|'\\${RED}${name}\\${NOBOLD}'|')&quot; &gt;&amp;2
      echo -e &quot;For more details run this: ${CYAN} git diff $old_sha1 $new_sha1 ${NOBOLD}&quot; &gt;&amp;2
      echo
      exit_status=1
    fi
  fi

  # CRLF check only java, xml
  if [[ $name =~ [.]java$|xml$ ]]
  then  
    git cat-file blob $new_sha1 &gt; $tmp
    RESULT=`grep -Pl '\r\n' $tmp`
    echo $RESULT
    if [ &quot;$RESULT&quot; = &quot;$tmp&quot; ]; then
          echo &quot;###################################################################################################&quot; &gt;&amp;2
          echo &quot;# '$name' contains CRLF! Dear Windows developer, please activate the GIT core.autocrlf feature,&quot; &gt;&amp;2
          echo &quot;# or change the line endings to LF before trying to push.&quot; &gt;&amp;2
          echo &quot;# Use 'git config core.autocrlf true' to activate CRLF conversion.&quot; &gt;&amp;2
          echo &quot;# OR use 'git reset HEAD~1' to undo your last commit and fix the line endings.&quot; &gt;&amp;2
          echo &quot;###################################################################################################&quot; &gt;&amp;2
          exit_status=1
    fi  
  fi

done &lt; $tree

# jenkins polling
branch=$(git rev-parse --symbolic --abbrev-ref $1)
escaped_branch=$(echo $branch | sed s:/:%2F:g)

refname=&quot;$1&quot;
oldrev=&quot;$2&quot;
newrev=&quot;$3&quot;
# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=&quot;0000000000000000000000000000000000000000&quot;
if [ &quot;$newrev&quot; = &quot;$zero&quot; ]; then
  newrev_type=delete
else
  newrev_type=$(git cat-file -t $newrev)
fi
skip_notify=0
echo &quot;$refname $newrev_type&quot; &gt;&amp;2
case &quot;$refname&quot;,&quot;$newrev_type&quot; in
  refs/tags/*,delete)
    # delete tag
    skip_notify=1
    echo &quot;Delete tag&quot; &gt;&amp;2
    ;;
  refs/heads/*,delete)
    # delete branch
    skip_notify=1
    echo &quot;Delete branch&quot; &gt;&amp;2
    ;;
  refs/remotes/*,delete)
    # delete tracking branch
    skip_notify=1
    echo &quot;Delete tracking branch&quot; &gt;&amp;2
    ;;
  *)
esac
if [[ &quot;$skip_notify&quot; == &quot;0&quot; ]]
then
  REPOSITORY_BASENAME=$(basename &quot;$PWD&quot;)
  curl &quot;http://jenkins.firma.cz/git/notifyCommit?url=ssh://git@git.firma.cz/$REPOSITORY_BASENAME&amp;branch=$escaped_branch&quot;
fi

rm -f $log $tmp $tree
exit $exit_status

</code></pre></noscript></div>
</p>

<p>Občas je potřeba notifikovat jen větev, která se změní, aby to nepustilo zbytečně joby, kde změny neproběhli.</p>

<p>Nejdůležitější části, jsou detekce větve, escape lomítka ve jménech větve.</p>

<pre><code>branch=$(git rev-parse --symbolic --abbrev-ref $1)
escaped_branch=$(echo $branch | sed s:/:%2F:g)
</code></pre>

<p>potom vlastní git-notify volání curlem.</p>

<pre><code>REPOSITORY_BASENAME=$(basename "$PWD")
curl "http://jenkins.firma.cz/git/notifyCommit?url=ssh://git@git.firma.cz/$REPOSITORY_BASENAME&amp;branch=$escaped_branch"
</code></pre>

<p>Snad to bude někomu užitečné také, pokud si chcete o Jenkinsu popovídat <a href="http://blog.prskavec.net/skoleni/">více, dejte vědět</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins SCM polling je zlo!]]></title>
    <link href="http://blog.prskavec.net/2012/06/jenkins-scm-polling-je-zlo/"/>
    <updated>2012-06-20T18:54:00+02:00</updated>
    <id>http://blog.prskavec.net/2012/06/jenkins-scm-polling-je-zlo</id>
    <content type="html"><![CDATA[<p>Moc jsem nechápal problémy, které řešil <a href="http://kohsuke.org/2011/12/01/polling-must-die-triggering-jenkins-builds-from-a-git-hook/">Kohsuke Kawaguchi</a> na konci roku. Ale brzo jsem to měl zjistit. Před časem přišel za mnou kolega, že chce zkonfigurovat polling stylem popisovaným v článku.</p>

<!--more-->


<p>Polling jsme nastavili na 1x24h a máme git-update hook, který nám polling spustí po kommitu, kdy je potřeba. Ukázka git-update skriptu.</p>

<p>```</p>

<pre><code>REPOSITORY_BASENAME=$(basename "$PWD") 
curl http://jenkins.firma.cz/jenkins/git/notifyCommit?url=ssh://git@git.firma.cz/$REPOSITORY_BASENAME
</code></pre>

<p>```</p>

<p>V poslední době nám performace jenkins serveru začala klesat a load serveru prudce stoupat. Začali jsme to řešit pomocí dalších volných strojů, které se k jenkins masteru připojovali jako slave node. Úspěšně jsme si vyzkoušeli na to použití pluginu <a href="https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin">swarm</a>, který můžu doporučit. Vytvořili jsme RPM balík, který nainstalujeme na volný stroj a swarm se připojí k masteru a je plně nakonfigurovaný a k dispozici. Důležité je jen mít na slave nodes dost diskového prostoru, protože joby jsou dost často velké, obzvláště pokud jich máte velký počet.</p>

<p>Abych se vrátil k SCM pollingu. Naši systémaci udělali analýzu nejvytíženějších repository v Gitu. A data mám udávají čas spotřebovaný na provedení všech činností po dobu 14 dní. Na grafu je vidět přehled podle repository.</p>

<p><img class="center" src="/images/scmpolling/graph-01.png" title="&lsquo;Prehled repository podle casu&rsquo;" ></p>

<p>V dalším grafu je vidět potom rozložení podle zátěže jednotlivými klienty, jak stroji (převážně jenkins a slave nodes, uživatelé jsou v minoritě).</p>

<p><img class="center" src="/images/scmpolling/graph-02.png" title="&lsquo;Prehled repository podle uzivatele&rsquo;" ></p>

<p>Poslední graf ukazuje počet přístupů do jednotlivých repository. Je potřeba podle toho upravit joby a jejich SCM polling.</p>

<p><img class="center" src="/images/scmpolling/graph-03.png" title="&lsquo;Prehled repository podle poctu pristupu&rsquo;" ></p>

<p>Na hromadné změny SCM pollingu můžete úspěšně použít <a href="https://wiki.jenkins-ci.org/display/JENKINS/Configuration+Slicing+Plugin">Configuration Slicing Plugin</a>, který vám práci usnadní. U nějvíce vytížených repository doporučili použít notifikace pomocí git-update hooku, případně to můžete udělat všude.</p>

<p>Výsledná zátěž stroje potom výrazně klesla potom co jsme upravili nastavení jak je vidět z grafů muninu.</p>

<p><img class="center" src="/images/scmpolling/graph-04.png" title="&lsquo;Prehled z munina&rsquo;" ></p>

<p>Další doporučení a tipy triky z praxe se dozvíte na mém školení <a href="http://bit.ly/k-ci">Jenkins &ndash; jak na Continuous Integration v PHP a Javascriptu</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins - jak na Continuous Integration v PHP a Javascriptu 26.6.2012]]></title>
    <link href="http://blog.prskavec.net/2012/06/jenkins-jak-na-continuous-integration-v-php-a-javascriptu-26-dot-6-2012/"/>
    <updated>2012-06-14T14:32:00+02:00</updated>
    <id>http://blog.prskavec.net/2012/06/jenkins-jak-na-continuous-integration-v-php-a-javascriptu-26-dot-6-2012</id>
    <content type="html"><![CDATA[<h2>Aktuání školeni 26.6.2012</h2>

<p>Přijděte si popovídat o integraci vašich aplikací v PHP a Javascriptu na moje školení v úterý 26.6. <a href="bit.ly/k-ci">bit.ly/k-ci</a>.</p>

<p>Pro tento termín jsem připravil aktualnizaci, kde kromě PHP je přidána continous integration pro Javascript.</p>

<p>Přednášku jsem o tom měl na poledním čtvrtku. Slidy jsou k dispozici <a href="http://slidesha.re/MtbUvD">http://slidesha.re/MtbUvD</a>.</p>

<p>Pokud vám na školení o integraci něco chybí co by jste tam chtěli, neváhejte a oslovte mě emailem nebo v komentářích.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins – použití Continuous Integration engine pro PHP]]></title>
    <link href="http://blog.prskavec.net/2011/11/jenkins-pouziti-continuous-integration-engine-pro-php/"/>
    <updated>2011-11-24T20:24:00+01:00</updated>
    <id>http://blog.prskavec.net/2011/11/jenkins-pouziti-continuous-integration-engine-pro-php</id>
    <content type="html"><![CDATA[<p>Vyvíjíte větší PHP projekt a potřebujete zlepšit koordinaci vašeho týmu a vaše softwarové procesy? Přístup Continuous Integration a nástroj Jenkins, který jej umožňuje implementovat, vám pomohou. Dozvíte se, jak Jenkins nainstalovat, jak ověřovat kvalitu softwarového produktu, jak řešit spouštění automatických testů, jak testovat coding standard, jaké si stanovovat softwarové metriky či jak kontinuálně deployovat vaše průběžné výsledky.</p>

<!--more-->


<p>Všechno ukazuji na praktických příkladech s pomocí Ubuntu a virtualizace (VirtualBox) a za použití nástroje <a href="http://www.vagrantup.com">Vagrant</a>.</p>

<h2>Osnova školení pro <a href="http://webexpo.cz/blog/#prskavec">WebExpo Academy</a></h2>

<ul>
<li>Automatizace buildu</li>
<li>Instalace Jenkins</li>
<li>Continuous Integration</li>
<li>Continuous Inspection

<ul>
<li>API dokumentace</li>
<li>Softwarove metriky</li>
<li>Duplicitni kod</li>
<li>Coding standard</li>
<li>Agregace vysledku</li>
</ul>
</li>
<li>Automatizace automatizace</li>
<li>Continuous Delivery</li>
</ul>


<h2>Informace o školení</h2>

<p>Termín: pátek 16. 12. 2011 10:00 – 18:00</p>

<p>Cena 4 490,&ndash; Kč. V prosinci jen za 2 290,&ndash; Kč!</p>

<p>Kapacita: Zbývají 2 místa.</p>

<p>Objednávky: <a href="mailto:academy@webexpo.net"><a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#97;&#x63;&#97;&#100;&#x65;&#109;&#x79;&#64;&#119;&#101;&#98;&#x65;&#120;&#x70;&#x6f;&#46;&#x6e;&#101;&#x74;">&#x61;&#99;&#97;&#100;&#101;&#x6d;&#x79;&#x40;&#119;&#x65;&#x62;&#x65;&#x78;&#112;&#111;&#46;&#x6e;&#101;&#x74;</a></a>, +420 775 477 457</p>

<p>Školení se konají v Praze v prostoru WebHub, adresa: Kafkova 16, Praha 6, dvě minuty pěšky od metra Dejvická.</p>

<h2>Související články</h2>

<ul>
<li><a href="http://blog.prskavec.net/2009/12/php-codebrowser/">http://blog.prskavec.net/2009/12/php-codebrowser/</a></li>
<li><a href="http://blog.prskavec.net/2009/02/hudson-a-php/">http://blog.prskavec.net/2009/02/hudson-a-php/</a></li>
<li><a href="http://blog.prskavec.net/2009/04/phphudson/">http://blog.prskavec.net/2009/04/phphudson/</a></li>
<li><a href="http://blog.prskavec.net/2009/03/pdepend-a-php-frameworky/">http://blog.prskavec.net/2009/03/pdepend-a-php-frameworky/</a></li>
<li><a href="http://blog.prskavec.net/2009/03/pdepend-a-php-frameworky-dodatek/">http://blog.prskavec.net/2009/03/pdepend-a-php-frameworky-dodatek/</a></li>
<li><a href="http://blog.prskavec.net/2008/11/phpundercontrol-vs-xinc/">http://blog.prskavec.net/2008/11/phpundercontrol-vs-xinc/</a></li>
<li><a href="http://blog.prskavec.net/2008/06/phing-svnlogtask/">http://blog.prskavec.net/2008/06/phing-svnlogtask/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
