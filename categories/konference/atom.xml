<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kategorie: konference | Prskavčí blog]]></title>
  <link href="http://blog.prskavec.net/categories/konference/atom.xml" rel="self"/>
  <link href="http://blog.prskavec.net/"/>
  <updated>2016-10-17T08:28:07+02:00</updated>
  <id>http://blog.prskavec.net/</id>
  <author>
    <name><![CDATA[Ladislav Prskavec]]></name>
    <email><![CDATA[ladislav@prskavec.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SREcon'16 Europe]]></title>
    <link href="http://blog.prskavec.net/2016/07/srecon-16-europe/"/>
    <updated>2016-07-14T08:13:00+02:00</updated>
    <id>http://blog.prskavec.net/2016/07/srecon-16-europe</id>
    <content type="html"><![CDATA[<p>Letošní <a href="https://www.usenix.org/conference/srecon16europe">SREcon</a> byl zase v Dublinu. Od 11.7. do 13.7. se zde setkali velcí hráči (Google, Facebook, Microsoft, Amazon) s těmi menšími a vyměňovali si spoustu zkušeností. Letos jsem se mohl poprvé zúčastnit. Nebyl jsem z ČR sám, zastoupení měli Avast, Seznam nebo Skype či Algolia. Dohromady asi 5 lidí.
Konference byla vyprodaná a hodně míst měli lidé z Googlu a pokud vás zajímalo jak se pracuje v Dublinském Googlu nebo Facebooku mohli jste si o tom s lidmi promluvit.
Celá konference byla ve 4 sálech a to jeden hlavní, který se po keynote rozdělil na dva a potom poslední dva byli hlavně pro workshopy a lighting talky.</p>

<h2>Co to SRE je?</h2>

<p>Pokud nevíte <a href="http://blog.prskavec.net/2016/03/co-to-je-sre/">co to je SRE</a>, tak kromě mého článku existuje skvělá kniha <a href="http://shop.oreilly.com/product/0636920041528.do">Site Reliability Engineering</a> od lidí z Googlu, kde se všechno detailně vysvětluje a skoro každý přenášející něco z knihy citoval. Je to taková bible SRE a vůbec první kniha zastřešujíc tento obor.</p>

<!-- more -->


<h2>Nejzajímavější přednášky</h2>

<p>K přednáškám chci jen dodat, jsou to mé postřehy, pokud vás to zaujme měli by být videa za pár týdnů veřejně dostupné na youtube.</p>

<h3>Splicing SRE DNA Sequences in the Biggest Software Company on the Planet &ndash; Greg Veith, Microsoft</h3>

<p>Greg mluvil o transformaci v Microsoftu a jeho práci na zavádění SRE do práce týmů kolem MS Azure. Začali budovat SRE kolem roku 2009 a doteď transformace probíhá nejen v MS Azure, ale v celé firmě. Pro zavedení byli klíčové tři věci. Za prvé vlastní start SRE týmu, zavedení principů. Za druhé aplikaci principů, aby jste model otestovali. Za třetí musíte akcelerovat a vylepšovat ho tak, aby zahrnul celou firmu. Gregova přednáška byla také hodně o tom jak je MS velký firma a tak je to práce pro hodně lidí, přesto hlavní SRE tým je asi jen 5-7 lidí.</p>

<p>Diskuze o tom kolik SRE lidí má být ve firmě byla celkem častá. Osobně se mi libí názor z LinkedIN, kde uvádějí 1:10 poměr SRE a Engineeringu. U velkých firem jako je Google je to asi 5%. Tomu 1:10 odpovídáme i v Apiary a myslím, že je dobré se toho držet.</p>

<h3>Doorman: Global Distributed Client-Side Rate Limiting &ndash; Jos Visser, Google</h3>

<p>Jos mluvil o projektu <a href="https://github.com/youtube/doorman">Doorman</a>, který používají v Youtube limitaci zdrojů v distribuovaném systému pro omezení zátěže MySQL. Doorman je napsaný v Go langu, používá pro komunikaci gRPC. Zajímavé je hlavně to, že nemá žádný diskový prostor pro ukládání stavu a drží informace jen v paměti. Pokud dojde k výpadku tak se pustí learning mode a od klientů se dozví všechno co potřebuje a potom pokračuje ve funkci.</p>

<p> ### Building and Running SRE Teams &ndash; Kurt Andersen, LinkedIn
Kurt mluvil o knize <a href="https://www.amazon.com/Team-Teams-Rules-Engagement-Complex/dp/1591847486">Team of Teams</a> a jak aplikovat vojenské postupy do SRE a systému rozhodování. Jako klíčové viděl hlavně posun důležitých rozhodnutí na lidi co jsou nejblíže tomu tu akci potom vykonat.</p>

<h3>The Production Engineering Lifecycle: How We Build, Run, and Disband Great Reliability-focused Teams &ndash; Andrew Ryan, Facebook</h3>

<p>Andrew mluvil o Production Engineeringu (PE) ve Facebooku. Je to obdoba SRE. Mají asi 700 lidí v šesti kancelářích po celém světe. Drží poměr 1:10 podobně jako LinkedIn. Hodně řeší nakolik je v každém týmu potřeba PE a zda je produkt opravdu tak důležitý pro firmu, aby bylo nutné mít oncall (min. 12+ PE). Pokud ne tak se oncall přesune na vývojáře a PE může působit jako poradce jak věci zlepšit. Naopak na core produktech mají například pro cache pět paralelních rotací na oncallu.</p>

<h3>How to Improve Your Service by Roasting It &ndash; Jake Welch, Microsoft</h3>

<p>Jake mluvil o tom jak přenést znalosti o komplexních systémech od autorů k dalším lidem do firmy. Doporučil vytvořit skupinku a věnovat 45min týdně po dobu 10 týdnů na předávání znalostí. Je důležité, aby to někdo řídil. Role Roast Master je pro úspěch klíčová. Musí hlídat jak tón řeči a vůbec vyjadřování, aby to nesklouzlo k osobním antipatijím a drželo se to v racionální rovině. Agendu je potřeba správně rozdělit po komponentách nebo subsystémech a držet se toho, na konci potom stanovit co se bude probírat příště a nepřekračovat čas 45min.</p>

<h3>What SRE Means in a Start-up &ndash; Brian Scanlon, Intercom</h3>

<p>Brian mluvil o SRE ve startupu, kde je situace jednoduší pokud se prostě nastaví politika od začátku, často se používá hostovaná infrastruktura, která celou věc usnadňuje. Celkem to kopírovalo to jak to děláme mi v Apiary.</p>

<p>Hodně je vidět jaký velký rozdíl a kolik práce to dá pokud chcete firmu předělat na SRE (brownfielding) nebo začnete hned.</p>

<h3>The Many Ways Your Monitoring Is Lying to You &ndash; Sebastian Kirsch, Google, <a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#x73;&#x6b;&#105;&#x72;&#115;&#x63;&#104;&#x40;&#103;&#111;&#x6f;&#103;&#108;&#101;&#46;&#99;&#111;&#109;">&#115;&#107;&#105;&#114;&#x73;&#x63;&#104;&#64;&#103;&#111;&#x6f;&#103;&#108;&#101;&#46;&#x63;&#x6f;&#109;</a></h3>

<p>Skvělá přednáška o tom jak nemůžete věřit každému grafu v monitoringu. Doporučuji schlédnout až bude video, bylo tam hodně příkladů. Jde o to, že věci, které uváděl nejsou pro mě například vůbec nové díky lekcím z numerické matematiky a statistiky na ČVUT, ale ne každý má statistický background a nebývá to až tak běžná součást Computer Science.</p>

<h3>Next-generation Alerting and Fault Detection &ndash; Dieter Plaetinck, <a href="http://raintank.io">raintank</a></h3>

<p>Dieter hodně zdůrazňoval použití machine learning na detekci anomálií a to jak to prakticky moc nefunguje a proto se uchylujeme k streamovanému zpracování dat pomocí nástrojů jako je Spark nebo Riemann.io. Ale nejzajímavější věc zmíněná v přednášce je <a href="https://bosun.org">Bosun</a>, také IDE pro alerting, kde se dá dělat historický testing, ladění alertů, vyhodnocování na základě dalších dat. Pro podrobosti doporučuji projít články na <a href="http://dieter.plaetinck.be">blogu</a>.</p>

<h3>DNS @ Shopify &ndash; Emil Stolarsky, Shopify</h3>

<p>Krátký lighting talk o mangementu DNS používající Git a CI. Čerstvé open source přímo před konferencí.</p>

<ul>
<li><a href="https://github.com/Shopify/record_store">https://github.com/Shopify/record_store</a></li>
<li><a href="https://github.com/Shopify/ejson">https://github.com/Shopify/ejson</a></li>
</ul>


<h3>Availability Objectives of SoundCloud’s Microservices &ndash; Bora Tunca, SoundCloud</h3>

<p>SoudCloud je autorem Prometheus.io monitoringu a měli dvě přednášky co jsem viděl. Mají dnes microservice architekturu rozdělenou do několika vrstev a podle toho je daná požadovaný dostupnost a také pracují s graceful degradation pokud to jde. Jako příklad jsou třeba statistky k jednotlivým trackům. Modul stats má SLO 95% a tracks mají 99.995% a tak je to zohledněné i na UI.</p>

<h3>The Knowledge: Towards a Culture of Engineering Documentation &ndash; Riona MacNamara, Staff technical writer, Google</h3>

<p>Riona mluvila o hrozném stavu dokumentace v Google. Přirovnala ji k testování v roce 2005. Jak to celkově zhoršuje produktivitu, spolehlivost a rychost. Zkoušeli to několikrát vyřešit pomocí vytvoření komplexního dokumentačního systému, který vytvoří někdo pro celou firmu a zeshora se to prosadí.</p>

<p>Tento přístup nefungoval a proto v roce 2014 úplně změnili přístup, začali ze zdola nahoru od jednotlivých engineerů a vytvořili systém g3doc, který dnes používá 10k projektů v google a mají přes 17k autorů, kteří do dokumentace přispívají.</p>

<p>Klíčové bylo dát dokumentaci přímo do repositářů projektu, mít to v jednoduchém formátů čitelném přímo v IDE. Zvolili markdown, který si potom silně vylepšili. Mají potom na serverové straně systém, který vygeneruje HTML a publikuje dokumentaci na url, které se dá lehce podle jména projektu odhadnout.</p>

<p>Projekt bohužel není open source, ale snad jednou bude. Díky spoustě googlerů, kteří do projektu v rámci svých 20% přispěli je tam hodně funkcí, které mi máme díky Sphinx.</p>

<h2>Odkazy na zdroje</h2>

<ul>
<li><a href="http://www.franklinangulo.com/blog/2016/7/11/srecon-2016-dublin-day-1">http://www.franklinangulo.com/blog/2016/7/11/srecon-2016-dublin-day-1</a></li>
<li><a href="http://www.slideshare.net/goldshtn/the-next-linux-superpower-ebpf-primer">http://www.slideshare.net/goldshtn/the-next-linux-superpower-ebpf-primer</a></li>
<li><a href="https://github.com/dastergon/awesome-sre">https://github.com/dastergon/awesome-sre</a></li>
</ul>


<p>Budu se snažit průběžně doplňovat zdroje a přidám odkazy na videa až budou.</p>

<h2>Shrnutí</h2>

<p>Pokud se zajímáte o transformaci engineeringu a říká vám něco DevOps nebo SRE je to konference pro vás. Pokud vás to zajímá a chtěli by jste si o tom promluvit, klidně mě kontaktujte. Bohužel jsem nenašel vhodnou konferenci v Česku, kde o tom mluvit, aby se to dostalo více do povědomí firmem.</p>

<p>Další SREcon bude příští rok zase v USA (March 13–14, 2017, SF), Evropě (Dublin) a také poprvé v Asii (May 22–24, 2017, Singapur).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deployment prakticky - WebExpo 2011]]></title>
    <link href="http://blog.prskavec.net/2011/09/deployment-prakticky-webexpo-2011/"/>
    <updated>2011-09-25T00:00:00+02:00</updated>
    <id>http://blog.prskavec.net/2011/09/deployment-prakticky-webexpo-2011</id>
    <content type="html"><![CDATA[<p>Letos jsem přednášel na Webexpu na téma deployment. Ve 30 minutách se nedá říci dost, aby jste se dozvěděli všechno tak zkusím v tomto článku shrnout o čem jsem mluvil a přidat nějaké zdroje, které pomůžou v dalších úsilí při automatizaci deploymentu.</p>

<h2 id="deployment">Deployment</h2>


<ul>
    <li>Nasazení dané aplikace na dané prostředí v daném čase s možností vrácení původní verze aplikace pokud možno s minimálními prostředky a náklady.</li>
</ul>


<h2 id="configuration_management">Configuration Management</h2>


<ul>
    <li>Služba, která se stará, aby námi zadaná konfigurace byla konzistentní napříč prostředím a na všech strojích a je to jeden nezbytných kroků pro CI.</li>
</ul>


<h2 id="continuous_integration">Continuous Integration</h2>


<p>CI pomáhá dramaticky snížit počet chyb při vývoji i v produkci pokud se to dělá dobře a důsledně.</p>

<p>Pro dobré fungovaní Continuous Integration potřebujete automatizovat deployment na prostředí. Na prostředích se často střídají aktuální feature větve vývojářů nebo se tam provádí update z větve pro release či sprint. K tomu se vše provádí několikrát denně. Abychom tohle mohli dělat potřebuje deployment mít plně automatický.</p>

<pre><code>"Automated deployment, tied into good CI discipline, is essential to making this work." - Martin Fowler
</code></pre>


<h2 id="tlatko_push">Tlačítko push</h2>


<p>Deployment musí být tak jednoduchý, aby ho zvládnul kdokoliv, kdo ho potřebuje a má potřebné oprávnění. Zdá se celkem jednoduché, ale není tomu tak. Pokud je potřeba například znalost linuxu (vytváření symlinku, ssh klient apod.), může to být pro část týmu třeba dost velká překážka, aby si něco nasadili a raději řeknou developerovi. On to má přece za minutku nasazené. Ale v tom je problém, pokud developer není po ruce, nebo nemá čas, tak část práce stojí. Obzvláště při agilním vývoji a krátkém sprintu to může být dost znát.</p>

<p>Pokud ještě se deployment dělá ručně, občas se na něco zapomene a jakákoliv ruční práce je zdrojem chyb. Celkově dojde k úspoře nákladů, protože čas ztrávený deploymentem firmě nikdo nezaplatí.</p>

<p>Za tlačítkem push si můžete představit jakýkoliv spouštěč, který vám vyhovuje (git push do příslušné větve, tlačítko na webu apod.).</p>

<p>Pokud nemáte zkušenost s gitem, tak rozvedu ten git push. Ostatní mohou odstavec přeskočit.</p>

<p>Git jako distribuovaný systém funguje jen lokálně a může mít svoje vzdálené kopie repository podobně jako v architektuře klient server (Subversion). Ale nemusí mít jen jedno místo kam se zdrojový kód odesílá pomocí git push. Toho se dá využít a používá se to tak, že kromě serveru kam ukládáte zdrojový kód (u mě například Github.com), který je označený jako origin (git push origin master &ndash; odešle kód tam), mohu například přidat místo kde se pushem přímo nasadí (git push heroku master &ndash; kód se odešle na cloud Heroku a dojde k jeho nasazení). Obdobně kromě místa, lze použít určité větve a mít na serveru hook script, který detekuje změny a provede nasazení.</p>

<ul>
    <li><a href="http://stackoverflow.com/questions/279169/deploy-a-project-using-git">http://stackoverflow.com/questions/279169/deploy-a-project-using-git</a></li>
    <li><a href="http://ryanflorence.com/deploying-websites-with-a-tiny-git-hook">http://ryanflorence.com/deploying-websites-with-a-tiny-git-hook </a></li>
</ul>


<h2 id="jak_to_nechat_na_jinch">Jak to nechat na jiných</h2>


<p>Pokud můžete a děláte projekt, kde se můžete dovolit využít hostingu, cloudu, který deployment vyřeší za vás, udělejte to. Ušetří vám to čas i prostředky. Samozřejmě ne vždy to jde, ale pro ty případy tu bude další kapitola.</p>

<h3 id="herokucom"><a href="http://heroku.com">Heroku.com</a></h3>


<ul>
    <li>Ruby, Node.js, Closure, Java (CLI client, rake pro příkazy jako jsou migrace db, hodně dodatečných služeb - <a href="http://addons.heroku.com/">http://addons.heroku.com/</a>)</li>
    <li>částečná podpora pro PHP a Python přes Facebook - <a href="https://developers.facebook.com/blog/post/558/">https://developers.facebook.com/blog/post/558/</a>.</li>
</ul>


<p>Další služby, recenze některých jsem dělal dříve.
&ndash; <a href="http://www.pagodabox.com"><a href="http://www.pagodabox.com">http://www.pagodabox.com</a></a>
&ndash; <a href="http://phpfog.com"><a href="http://phpfog.com">http://phpfog.com</a></a>
&ndash; <a href="http://orchestra.io/"><a href="http://orchestra.io/">http://orchestra.io/</a></a>
&ndash; <a href="http://www.engineyard.com"><a href="http://www.engineyard.com">http://www.engineyard.com</a></a>
&ndash; <a href="http://cloudcontrol.com/"><a href="http://cloudcontrol.com/">http://cloudcontrol.com/</a></a>
&ndash; <a href="http://relbit.com"><a href="http://relbit.com">http://relbit.com</a></a>
&ndash; <a href="http://nodester.com/"><a href="http://nodester.com/">http://nodester.com/</a></a></p>

<p>Samozřejmě jsem nemohl vyzkoušet podrobně každou cloudovou službu, na to nemám rozpočet a ne každá má k dispozici zdarma potřebný program pro vývojáře. Důležité aspoň pro mě je podpora práce z CLI kvůli možnosti automatizace, případně nějaké API, které to umožňuje. A také podpora vlastního nastavení a úkolů, aby jste mohli například automaticky spustit test nebo migraci databáze. Svoje zkušenosti nebo rady a doporučení uveďte do komentářů, budu rád.</p>

<h2 id="jak_si_to_vyrobit_sm">Jak si to vyrobit sám</h2>


<h3 id="rozdlen_nstroj_pro_deployment">Rozdělení nástrojů pro deployment</h3>


<ul>
    <li>balíčkovací systémy (<a href="http://en.wikipedia.org/wiki/Listofsoftwarepackagemanagement_systems">http://en.wikipedia.org/wiki/List<em>of</em>software<em>package</em>management_systems</a>)
<ul>
    <li>podle operačního systému (RPM, DEB)</li>
    <li>podle jazyka (phar, pear, gem, npm, cpan)</li>
</ul>
</li>
    <li>nástroje
<ul>
    <li>capistrano - <a href="http://capify.org/">http://capify.org/</a></li>
    <li>fabric - <a href="http://fabfile.org">http://fabfile.org</a></li>
    <li>cfengine - <a href="http://cfengine.com/">http://cfengine.com/</a></li>
    <li>puppet - <a href="http://puppetlabs.com/">http://puppetlabs.com/</a></li>
    <li>chef - <a href="http://www.opscode.com/">http://www.opscode.com/</a></li>
    <li>ant - <a href="http://ant.apache.org/">http://ant.apache.org/</a>, maven - <a href="http://maven.apache.org/">http://maven.apache.org/</a>, buildr - <a href="http://buildr.apache.org/">http://buildr.apache.org/</a></li>
    <li>make, rake, phake, phing apod.</li>
</ul>
</li>
</ul>


<h3 id="capistrano">Capistrano</h3>


<p>Instalace
&ndash; pro instalaci potřebujete ruby (windows &ndash; <a href="http://rubyinstaller.org/"><a href="http://rubyinstaller.org/">http://rubyinstaller.org/</a></a>, mac &ndash; součást OS)
&ndash; pokud budete deployment dělat pro ruby aplikaci nepotřebujete samozřejmě railsless-deploy</p>

<pre><code>gem install capistrano capistrano-ext railsless-deploy
</code></pre>


<p>Zdrojový kód si stáhněte z <a href="https://github.com/abtris/webexpo2011-wordpress.git">githubu</a>.</p>

<pre><code>git clone https://github.com/abtris/webexpo2011-wordpress.git
</code></pre>


<p>Zajímají nás tyto soubory:</p>

<pre><code>Capfile
templates/apache.conf.erb
config/deploy/development.rb
config/deploy/production.rb
config/deploy/apache.rb
config/deploy/deploy.rb
</code></pre>


<p>které nám umožňují dělat deployment:
cap deploy
cap development deploy
cap production deploy</p>

<p>a configuration management:</p>

<pre><code>cap apache:setup
cap apache:start
cap apache:stop
cap apache:restart
</code></pre>


<h3 id="praktick_ukzka_capistrana_na_videu">Praktická ukázka Capistrana na videu</h3>


<ul>
    <li>používám virtuální server pro deployment, který je vytvořen pomocí Vagrant (<a href="http://www.vagrantup.com">www.vagrantup.com</a>) a Chef</li>
    <li>ukázka jak se vytváří Jenkins server pro testovaní - <a href="https://github.com/abtris/vagrant-hudson">https://github.com/abtris/vagrant-hudson</a></li>
</ul>


<iframe width="420" height="315" src="http://www.youtube.com/embed/MisWQe4JhEQ" frameborder="0" allowfullscreen></iframe>


<h2 id="jenkins_jak_se_to_dl_v_jobscz">Jenkins - jak se to dělá v Jobs.cz</h2>


<ul>
    <li>v LMC (jobs.cz, prace.cz) je vývoj v Javě a PHP. Pro oboje používáme od roku 2008 na build Hudson dnes Jenkins. Pro Javu se přechází na build postavená na Mavenu a v PHP používáme build napsaný v Antu, který vytváří RPM balíčky pro nasazení CFEngine nebo pomocí skriptu přímo z Jenkins.</li>
    <li>jak vyrobit RPM pro PHP - ukázka s kódem k dispozici <a href="https://github.com/abtris/barcamp2010praha">https://github.com/abtris/barcamp2010praha</a></li>
</ul>


<p>etc/demoapp.spec</p>

<pre><code>Summary: Demo App
Name: @@PACKAGE_NAME@@
Version: @@VERSION@@
Release: @@BUILD@@
License: Copyright by Ladislav Prskavec
Group: System Environment/Internet
BuildRoot: @@BUILDROOT@@

#topdir
%define _topdir @@TOPDIR@@
%define _target_os Linux

%description
Barcamp 2010 demo app

%install
mkdir -p $RPM_BUILD_ROOT/srv/www/demoApp/@@CURRENT@@
cp -r ${FILENAME}-${VERSION}/* $RPM_BUILD_ROOT/srv/www/demoApp/@@CURRENT@@/

%clean
[ "${RPM_BUILD_ROOT}" != "/" ] &amp;&amp; rm -rf ${RPM_BUILD_ROOT}

%files
/srv/www/demoApp/@@CURRENT@@

%defattr(755,root,root)
%dir /srv/
%dir /srv/www
%dir /srv/www/demoApp/
%dir /srv/www/demoApp/@@CURRENT@@/

%post
echo "run: ln -nfs /srv/www/demoApp/@@CURRENT@@/ /srv/www/demoApp/current"
</code></pre>


<p>a k tomu příslušný build script</p>

<pre><code>&lt;project name="project_name" default="clean" basedir="."&gt;
&lt;!-- task definition for cycle --&gt;
&lt;taskdef resource="net/sf/antcontrib/antlib.xml"/&gt;
    &lt;description&gt;
        barcamp demo app
    &lt;/description&gt;

  &lt;!-- options from properties file --&gt;
  &lt;!-- ${ws} is in Hudson $WORKSPACE --&gt;
  &lt;echo message="reading properties from: ${ws}/etc/build.properties" /&gt;
  &lt;echo message="module name ${modulename}" /&gt;
  &lt;property file="${ws}/etc/build.properties"/&gt;
  &lt;!-- options from .spec file --&gt;
  &lt;property name="spec_file" value="/etc/${modulename}.spec" /&gt;
  &lt;!--  make unique rpm_build_root, solve problems with branches --&gt;
  &lt;exec executable="mktemp" outputproperty="rpm_build_root"&gt;
    &lt;arg value="-d" /&gt;
    &lt;arg value="-t" /&gt;
    &lt;arg value="${modulename}.XXXXXXXXXX" /&gt;
  &lt;/exec&gt;
  &lt;echo message="RPM Build root set to: ${rpm_build_root}" /&gt;
  &lt;!-- set global properties for this build --&gt;
  &lt;property name="build" location="${rpm_build_root}/BUILD"/&gt;
  &lt;property name="rpms" location="${rpm_build_root}/RPMS"/&gt;

 &lt;target name="init"&gt;
    &lt;!-- Create the time stamp --&gt;
    &lt;tstamp/&gt;
    &lt;!-- Create the build directory structure used by compile --&gt;
    &lt;mkdir dir="${build}"/&gt;
    &lt;mkdir dir="${rpms}/i386"/&gt;
  &lt;/target&gt;

 &lt;target name="gitrevision" unless="REV" depends="init"&gt;
   &lt;exec executable="git" output="${rpm_build_root}/gitinfo"&gt;
     &lt;arg value="rev-list"/&gt;
     &lt;arg value="--all"/&gt;
   &lt;/exec&gt;
   &lt;exec executable="wc" output="${rpm_build_root}/wcinfo"&gt;
     &lt;arg value="-l" /&gt;
     &lt;arg value="${rpm_build_root}/gitinfo" /&gt;
   &lt;/exec&gt;
   &lt;exec executable="awk" outputproperty="REV"&gt;
     &lt;arg value="{ print $1 }"/&gt;
     &lt;arg value="${rpm_build_root}/wcinfo"/&gt;
   &lt;/exec&gt;
   &lt;echo message="REV: ${REV}" /&gt;
 &lt;/target&gt;

 &lt;target name="gitexport" depends="gitrevision"&gt;
  &lt;mkdir dir="${build}/${modulename}-${REV}" /&gt;
  &lt;copy todir="${build}/${modulename}-${REV}"&gt;
    &lt;fileset dir="../"&gt;
      &lt;exclude name="../.git/*"/&gt;
    &lt;/fileset&gt;
  &lt;/copy&gt;
   &lt;echo message="Coping files ..." /&gt;
 &lt;/target&gt;

 &lt;!-- take spec files  --&gt;
 &lt;target name="spec" depends="gitexport"&gt;
        &lt;!-- get spec files --&gt;
        &lt;path id="spec.files"&gt;
            &lt;fileset  dir="${build}/${modulename}-${REV}/etc"&gt;
                &lt;include name="*.spec"/&gt;
            &lt;/fileset&gt;
        &lt;/path&gt;
        &lt;!-- convert slashes to unix (necessary for Win) --&gt;
        &lt;pathconvert pathsep="," targetos="unix" property="files" refid="spec.files"/&gt;

        &lt;echo message="Call RPM" /&gt;
        &lt;!-- Call RPM for all spec files (task for need antcontrib --&gt;
        &lt;for list="${files}" param="item"&gt;
        &lt;sequential&gt;
            &lt;antcall target="replace"&gt;
                &lt;param name="spec_file" value="@{item}"/&gt;
            &lt;/antcall&gt;
            &lt;antcall target="rpm"&gt;
                &lt;param name="spec_file" value="@{item}"/&gt;
            &lt;/antcall&gt;
        &lt;/sequential&gt;
        &lt;/for&gt;

 &lt;/target&gt;

  &lt;!-- replace tokens in spec files --&gt;
  &lt;target name="replace"&gt;
    &lt;replace file="${spec_file}" token="@@CURRENT@@" value="${major_version}-${REV}"/&gt;
    &lt;replace file="${spec_file}" token="@@TOPDIR@@" value="${rpm_build_root}"/&gt;
    &lt;replace file="${spec_file}" token="${VERSION}" value="${REV}"/&gt;
    &lt;replace file="${spec_file}" token="${FILENAME}" value="${modulename}"/&gt;
    &lt;basename property="spec.filename" file="${spec_file}" suffix=".spec" /&gt;
    &lt;echo message="${spec.filename}" /&gt;
    &lt;replace file="${spec_file}" token="@@PACKAGE_NAME@@" value="${spec.filename}"/&gt;
    &lt;replace file="${spec_file}" token="@@VERSION@@" value="${major_version}"/&gt;
    &lt;replace file="${spec_file}" token="@@BUILD@@" value="${REV}"/&gt;
    &lt;replace file="${spec_file}" token="@@BUILDROOT@@" value="${rpm_build_root}-${spec.filename}/" /&gt;
    &lt;replace file="${spec_file}" token="@" value=""/&gt;
  &lt;/target&gt;

 &lt;!-- rpmbuild  --&gt;
 &lt;target name="rpm"&gt;
   &lt;echo message="SPEC: ${spec_file}" /&gt;
   &lt;exec executable="rpmbuild"&gt;
      &lt;arg value="--target=i386"/&gt;
      &lt;arg value="-bb"/&gt;
      &lt;arg value="${spec_file}"/&gt;
   &lt;/exec&gt;

 &lt;/target&gt;

  &lt;!-- copy RPM files to TOP_DIR and delete tmp dirs --&gt;
  &lt;target name="clean" depends="spec"&gt;
    &lt;copy todir="${target_path}"&gt;
        &lt;fileset  dir="${rpms}/i386/"&gt;
        &lt;include name="*.rpm"/&gt;
    &lt;/fileset&gt;
    &lt;/copy&gt;  &lt;/target&gt;

&lt;/project&gt;
</code></pre>


<h3 id="infrastructure_as_code">Infrastructure As code</h3>


<p>Pokud máte k dispozici více prostředí, nebo pokud používáte masivnější virtualizaci jistě víte, že to bez automaticace nejde.</p>

<p>K nejznámějším nástrojům patří CFEngine, Puppet a Chef.</p>

<pre><code>1993 - CFEngine
2002 - CFEngine 2
2005 - Puppet
2009 - CFEngine 3, Chef
</code></pre>


<p>O chefu jsem se zmiňoval již dříve, je vhodný právě například pro tvorbu virtualizací ve velkém. Pro příklad uvedu cluster <a href="http://blog.cyclecomputing.com/2011/09/new-cyclecloud-cluster-is-a-triple-threat-30000-cores-massive-spot-instances-grill-chef-monitoring-g.html">Nostromu</a>, který měl 30 000 jader.</p>

<p>Puppet
&ndash; <a href="http://www.puppetlabs.com">http://www.puppetlabs.com</a>
&ndash; napsaný v Ruby, odvozený od cfengine
&ndash; klient aktualizuje konfiguraci v pravidelných intervalech a reportuje zpět na server (Puppet Master)
&ndash; perfektní pro “sysadmins”
&ndash; deklarativní popis nastaveni</p>

<p>Chef
&ndash; <a href="http://www.opscode.com/chef">http://www.opscode.com/chef</a>
&ndash; v Ruby, odvozený od Puppetu
&ndash; Ruby DSL
&ndash; cloud provisioning
&ndash; imperativní popis, více flexibilní, více pro “vývojáře”
&ndash; pokud by vás to zajímalo doporučuji zajít na <a href="bit.ly/skolenichef">školení Radima Marka</a> (GoodData) &ndash; s kódem WEBEXPO2011 by měla být sleva 15%</p>

<h2 id="slidy">Slidy</h2>


<div style="width:425px" id="__ss_9388737"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/ladislavprskavec/deployment-prakticky" title="Deployment prakticky" target="_blank">Deployment prakticky</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/9388737" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/ladislavprskavec" target="_blank">Ladislav Prskavec</a> </div> </div>


<h2 id="zvr_co_si_odnst">Závěr - co si odnést</h2>


<ul>
    <li>Existují kvalitní nástroje pro deployment, použijte je!</li>
    <li>Každý oprávněný uživatel si lehce zjistí informaci o verzi aplikace na příslušném prostředí a jednoduše si nasadí verzi aplikace, kterou potřebuje na prostředí, kde to potřebuje.</li>
    <li>Jedině automatizací se vyhnete chybám. Každý ruční postup jednou selže.</li>
    <li>Uspoříte velké náklady, protože čas ztraceny deploymentem nepřináší žádný zisk.</li>
</ul>


<p><blockquote><p></p></p><p><h4>Jenkins - jak na Continuous Integration v PHP</h4></p><p><br/><p>Pochopení a využití procesu Continuous Integration s využitím nástroje Jenkins vám pomůže zvýšit kvalitu softwaru, který vyvíjíte, a zároveň snížit čas na jeho dodávku. Continuous Integration vám umožňuje kontrolovat kvalitu softwaru průběžně po malých částech a minimalizovat tak riziko rozsáhlých chyb, jak tomu bylo v případě klasického vodopádového přístupu.</p><footer><strong>Ladislav Prskavec &ndash; Kurz Jenkins <a href="http://webexpo.cz/academy/kurzy/jenkins-jak-na-continuous-integration-v-php">http://webexpo.cz/academy/kurzy/jenkins-jak-na-continuous-integration-v-php</a> WebExpo Academy</strong></footer></blockquote></p>
]]></content>
  </entry>
  
</feed>
