<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kategorie: docker | Prskavčí blog]]></title>
  <link href="http://blog.prskavec.net/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.prskavec.net/"/>
  <updated>2016-10-31T06:10:39+01:00</updated>
  <id>http://blog.prskavec.net/</id>
  <author>
    <name><![CDATA[Ladislav Prskavec]]></name>
    <email><![CDATA[ladislav@prskavec.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Suchý docker]]></title>
    <link href="http://blog.prskavec.net/2016/02/suchy-docker/"/>
    <updated>2016-02-05T09:20:00+01:00</updated>
    <id>http://blog.prskavec.net/2016/02/suchy-docker</id>
    <content type="html"><![CDATA[<p><a href="http://suchejunor.cz/">Suchý únor</a> je skvělá akce a tak jsem říkal, zda s Dockerem nebudeme také na suchu. Našťěstí včera se situace změnila a vyšli nové verze Docker Engine, Docker Swarm and Docker Compose.</p>

<p><blockquote><p>Pokud budete upgradovat, buďte opatrní, nový formát image není zpětně kompatibilní.</p><footer><strong>Docker docs <a href="https://docs.docker.com/engine/breaking_changes/">https://docs.docker.com/engine/breaking_changes/</a></strong></footer></blockquote></p>

<p>V originálu si novinky můžete prostudovat na blogu Dockeru:</p>

<ul>
<li><a href="http://blog.docker.com/2016/02/docker-1-10/">Docker 1.10: New Compose file, improved security, networking and much more!</a></li>
<li><a href="http://blog.docker.com/2016/02/docker-engine-1-10-security/">Docker Engine 1.10 Security Improvements</a></li>
<li><a href="http://blog.docker.com/2016/02/compose-1-6/">Compose 1.6: New Compose file for defining networks and volumes</a></li>
</ul>


<p>pokud si chcete přečíst novinky v češtině pokračujte v mém článku.</p>

<!-- more -->


<p>Novinek je spousta, ale budu se věnovat jen těm zásadním.</p>

<h2>Docker Engine 1.10</h2>

<p>Docker 1.10 používá nový systém pro ukládání image a layers. Není to zpětně kompatibilní, pokud uděláte upgrade, nemůžete použít staršího clienta. Migrace, která se spustí může trvat poměrně dlouho, pozor pokud máte docker v produkci. Při migraci se počítají SHA256 checksumy pro každý soubor.</p>

<p>Tyto změny s podporou paralelního pushovaní by měli urychlit <code>docker push</code> a <code>docker pull</code>, zvláště při pushi by to mělo být znát.</p>

<p>Další změny se týkají bezpečnosti. Podpora <a href="https://en.wikipedia.org/wiki/Seccomp">seccomp profiles</a>, User namespaces, Authorization plugins. V dalších verzích budou PID Control Group.</p>

<ul>
<li>nový příkaz <code>docker update</code> umožňuje měnit resources za běhu například pro navýšení paměti apod.</li>
<li>příkaz <code>docker images</code> podporuje flag <code>--format</code></li>
<li>nový <code>status=dead</code> pro filtrování v <code>docker ps</code></li>
<li>deprecated <code>-f</code> pro <code>docker tag</code></li>
<li>přidaný support pro <code>**</code> v <code>.dockerignore</code> pro více úrovní adresářů</li>
<li>nový logging ovladač pro Splunk</li>
<li>podpora více tagů v buildu</li>
</ul>


<h2>Docker Compose 1.6</h2>

<p>Nový formát <a href="https://docs.docker.com/compose/compose-file/#version-2">version 2</a> pro <code>docker-compose.yml</code>.</p>

<p>```yml
version: &lsquo;2&rsquo;
services:
  web:</p>

<pre><code>build: .
ports:
 - "5000:5000"
volumes:
 - .:/code
</code></pre>

<p>  redis:</p>

<pre><code>image: redis
</code></pre>

<p>```</p>

<p>Migrace většinou nebude <a href="https://docs.docker.com/compose/compose-file/#upgrading">složitá</a>, stačí přidat <code>version: 2</code> a <code>services:</code> na začátek a odsadit.</p>

<h3>Nové vlastnosti</h3>

<ul>
<li>nový příkaz <code>events</code> stejný jako <a href="https://docs.docker.com/engine/reference/commandline/events/"><code>docker events</code></a></li>
<li>nový příkaz <code>config</code> pro validaci <code>docker-compose.yml</code> včetně interpolací a použítí extendu</li>
<li>nový příkaz <code>create</code> pro vytvoření kontejnerů bez spuštění</li>
<li>nový příkaz <code>down</code> pro stopnutí a odstranění všeho co pouští příkaz <code>up</code></li>
<li>přídané nové konfigurační vlastnosti <code>cpu_quota</code>, <code>stop_signal</code></li>
<li>flag <code>--abort-on-container-exit</code> stopne všechny kontainery pokud jeden vyhodí exit</li>
</ul>


<h2>Docker Machine 0.6</h2>

<p>Zásadní vylepšení developer experience v příkazech docker-machine start, docker-machine stop a ostatních nemusíte používat argument <code>default</code> pokud ho přímo nespecifikujete.</p>

<p>Driver pro EC2 umí používat default VPC and automaticky číst přístupové údaje z <code>~/.aws/credentials</code>.</p>

<p>Spousta drobných změn, které mi nepřišli už důležité.</p>

<h2>Závěr</h2>

<p>Každý release přinese spoustu změn. Celý ekosystém dockeru je poměrně mladý, ale o to <a href="https://twitter.com/icecrime/status/694558000615288834">více dynamický</a>.</p>

<p>V Praze se každý měsíc konají <a href="http://www.meetup.com/Docker-Prague-Czech-Republic/">docker meetupy</a>, pokud vás tato problematika zajímá. Přijďte nebo nabídněte svoji přednášku pořadatelům.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon Elastic Beanstalk a docker]]></title>
    <link href="http://blog.prskavec.net/2015/05/amazon-elastic-beanstalk-a-docker/"/>
    <updated>2015-05-14T11:36:00+02:00</updated>
    <id>http://blog.prskavec.net/2015/05/amazon-elastic-beanstalk-a-docker</id>
    <content type="html"><![CDATA[<p>Amazon Elastic Beanstalk je Platform as Service podobný známému Heroku. Jen je součást Amazon Web Services. Podporuje řadu jazyků a v neposlední době přidal podporu <a href="http://www.docker.io">Dockeru</a>. Díky podpoře docker kontejnerů je možné pustit víceméně cokoliv.</p>

<!-- more -->


<p>Amazon web services operují v několika regionech. Dnes je jich 10 a z toho máte dva i v evropě. Pokud chcete zkoušet novinky, které AWS poskytuje doporučuji použít region <code>us-east-1</code>.</p>

<p>Amazon kromě regionů, které vám umožňují poskytovat služby z geograficky nejbližšího místa vašim zákazníkům, také podporuje Availability Zones (AZ), které vám umožňují zvýšit spolehlivost v jednom regionu. V každém regionu je k dispozici několik zón. Pokud máte skupinu serverů ve škálovacím režimu je dobré je rozprostřít přes několik AZ a tím máte jistotu pokud dojde k výpadku jedné zóny, že vaše služba poběží.</p>

<p>Elastic Beanstalk podporuje PHP, NodeJS, Python, Ruby, Java, Go a Docker.</p>

<p>Teď k Elastic Beanstalku (EB). Služba využívá zdroje AWS. Na vstupu je Elastic Load Balancer, který vám směřuje provoz na vaši aplikaci.</p>

<h2>Docker</h2>

<p>Pro funkci dockeru potřebujete buď <code>Dockerrun.aws.json</code> nebo <code>Dockerfile</code>. Já pro svůj příklad používám json file.</p>

<p>```
{</p>

<pre><code>"AWSEBDockerrunVersion": "1",
"Image": {
    "Name": "registry:0.9.1"
},
"Volumes": [
],
"Ports": [
    {
        "ContainerPort": "5000"
    }
]
</code></pre>

<p>}
```</p>

<p>tady je příslušný dockerfile, ale ten nemusíte použít. Buď json file nebo dockerfile.</p>

<p>```
FROM registry:0.9.1</p>

<p>ENV DEPS loose
RUN pip uninstall -y docker-registry-core &amp;&amp; pip uninstall -y boto &amp;&amp; pip install boto==2.34.0 &amp;&amp; pip install docker-registry-core</p>

<p>RUN env</p>

<p>ENV SETTINGS_FLAVOR s3
ENV AWS_BUCKET $AWS_S3_BUCKET
ENV STORAGE_PATH /registry
ENV AWS_KEY $AWS_S3_ACCESS_KEY
ENV AWS_SECRET $AWS_S3_SECRET_KEY
ENV AWS_REGION $AWS_S3_REGION
ENV AWS_HOST s3.amazonaws.com
ENV AWS_PORT 443
ENV AWS_CALLING_FORMAT REGULAR
ENV DEBUG True
ENV LOGLEVEL debug</p>

<p>EXPOSE 5000</p>

<p>CMD [&ldquo;docker-registry&rdquo;]
```</p>

<p>Možná vás překvapí, že kontainer nemá definovaný port na který má být směřovám. EB ve verzi 1 směřuje všechno na port 80, kde nginx proxy. Pokud definujete více portů použije se jen ten poslední.</p>

<p>Není to moc užitečné a pokud potřebujete použít více portů nenašel jsem vhodné řešení. Konfigurční předpis, ale již existuje ve verzi 2, kde jsou možnosti mnohem širší a tyto problémy se dají dobře řešit. Ale zatím to není v oficiální dokumentaci a našel jsem to jen AWS labs.</p>

<h2>Nginx Proxy</h2>

<p>Jak jsem říkal v předchozím odstavci, máte defaultní nginx proxy a veškeré nastavení se dá změnit, ale musíte to udělat pomocí adresáře <code>.ebextensions</code>.</p>

<p>Například konfigurace nginxu:</p>

<p>```
files:
  &ldquo;/etc/nginx/docker-registry.conf&rdquo;:</p>

<pre><code>mode: "000644"
owner: root
owner: root
content: |
  proxy_pass                        http://docker;
  proxy_http_version                1.1;
  proxy_set_header  Host            $http_host;
  proxy_set_header  X-Real-IP       $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header  Authorization  "";
  proxy_read_timeout               900;
</code></pre>

<p>```</p>

<p>a tady konfigurace vlastní website, kde jsem přidal autorizaci.</p>

<p>```
files:
  &ldquo;/etc/nginx/sites-available/elasticbeanstalk-nginx-docker-proxy.conf&rdquo;:</p>

<pre><code>mode: "000644"
owner: root
owner: root
content: |
  server {
    listen 80;

    client_max_body_size 0;
    chunked_transfer_encoding on;

    location / {
      auth_basic            "Restricted";
      auth_basic_user_file  docker-registry.htpasswd;
      include               docker-registry.conf;
    }

    location /_ping {
      auth_basic off;
      include               docker-registry.conf;
    }

    location /v1/_ping {
      auth_basic off;
      include               docker-registry.conf;
    }
  }
</code></pre>

<p>```</p>

<h2>Závěr</h2>

<p>Je potřeba definovat několik proměnných prostředí, které jsou vidět na skriptu pro spuštění.</p>

<p>```
docker run \</p>

<pre><code>     -e SETTINGS_FLAVOR=s3 \
     -e AWS_BUCKET=$AWS_S3_BUCKET \
     -e STORAGE_PATH=/registry \
     -e AWS_KEY=$AWS_S3_ACCESS_KEY \
     -e AWS_SECRET=$AWS_S3_SECRET_KEY \
     -e SEARCH_BACKEND=sqlalchemy \
     -e DEBUG=True \
     -e LOGLEVEL=debug \
     -e AWS_REGION="us-east-1" \
     -p 5000:5000 \
     registry
</code></pre>

<p>```</p>

<p>PaaS jako Elastic Beanstalk je celkem použitelný, má CLI clienta, funguje s gitem. Má to některé věci, které mi chybí například na Heroku (VPC, auto scaling). Ale přesto mi například práce s heroku přijde příjemnější i když to teď <a href="https://www.heroku.com/beta-pricing">zabili změnou plánů</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker cluster management]]></title>
    <link href="http://blog.prskavec.net/2015/02/docker-cluster-management/"/>
    <updated>2015-02-07T18:09:00+01:00</updated>
    <id>http://blog.prskavec.net/2015/02/docker-cluster-management</id>
    <content type="html"><![CDATA[<ul>
<li>Update: přidal jsem do článku další věci zmíněné v komentářích, všem děkuji za příspěvky.</li>
<li>Update 23.2.2015: Přidán odkaz na Centurion od New Relic</li>
</ul>


<p>V poslední době se zabývám technologiemi pro řízení clusterů s docker konteinery.</p>

<p>Pokud by to někoho zajímalo, zkusím jsem shrnout s čím jsem se potkal a kde vidím možné využití.</p>

<p>Nástroje, které můžete použít cluster management:</p>

<ul>
<li><a href="http://mesos.apache.org/">Apache Mesos</a> (cpp, api for java, python, c++)</li>
<li><a href="https://github.com/docker/swarm/">Docker Swarm</a> (golang)</li>
<li><a href="https://coreos.com/using-coreos/clustering/">CoreOS Fleet</a> (golang)</li>
<li><a href="http://kubernetes.io/">Google Kubernetes</a> (golang)</li>
<li><a href="https://github.com/spotify/helios">Spotify Helios</a> (java)</li>
<li><a href="https://github.com/newrelic/centurion">New Relic Centurion</a> (ruby)</li>
</ul>


<p>potom k tomu ješte patří některé frameworky pro Mesos a to <a href="https://mesosphere.github.io/marathon/">Marathon</a> a <a href="http://airbnb.github.io/chronos/">Chronos</a>. <a href="https://github.com/mesosphere/kubernetes-mesos">A Kubernetes Framework for Apache Mesos</a>.</p>

<!-- more -->


<p>Ještě potřebujete nástroj pro service discovery:</p>

<ul>
<li><a href="https://coreos.com/using-coreos/etcd/">CoreOS Etcd</a> (golang)</li>
<li><a href="https://consul.io/">Hashicorp Consul</a> (golang)</li>
<li><a href="http://zookeeper.apache.org/">Apache Zookeeper</a> (java)</li>
</ul>


<p>Etcd používá Kubernetes a další projekty. Service discovery je potřeba pro management clusteru. Můžete použít stejně jednoduše i ostatní projekty.</p>

<p>Apache Mesos umí pracovat s různorodým prostředím včetně Amazon ECS service. Framework Marathon vám potom slouží k pouštění dlouho běžících konteinerů pro aplikace a Chronos typicky pro batch processing například pro zpracování velkých dat. S Mesosem musíte provozovat ZooKeeeper pro discovery service.</p>

<p>Protože se snažím Javě vyhnout a raději volím nástroje v jiných jazycích, kde mám větší znalosti. Pro discovery service clusteru bych raději použil Consul nebo Etcd.</p>

<p>Google Kubernetes je poměrně vyspělý nástroj používaný pro Google Cloud a adaptovaný například RedHatem pro OpenShift V3. Tam mám trochu výhradu, že to nemá podporu pro více uživatelů a neumí pracovat s externím filesystémy co vím. Ale dá se používat na tvorbu dokonce hybridních clusterů mezi více poskytovateli (AWS, Google Cloud, OpenShift, fyzické stroje).</p>

<p>Docker Swarm je nástroj pro řízení clusterů konteinerů přímo od Dockeru, ale kromě základních příkladů není k dispozici nic většího, poporuje několik discovery service (etcs, consul, zookeeper). Nevím o nikom, kdo by to používal ve větším měřítku.</p>

<p>CoreOS Fleet je <a href="https://coreos.com/using-coreos/systemd/">systemd</a> a <a href="https://coreos.com/using-coreos/etcd/">etcd</a> a nemám s ním zkušenosti vůbec žádné. Projekty kolem <a href="https://coreos.com/">CoreOS</a> jsou zajímavé. Mají vlastní technologii konteinerů <a href="https://coreos.com/blog/rocket/">Rocket</a>.</p>

<p>Stejně jako CoreOS snaží se o podobnou věc i <a href="http://www.projectatomic.io/">Project Atomic</a> od RedHatu. Vytvořit základní systém pro práci s konteinery.</p>

<p>Závěr je asi takový, že pokud budete chtít řídít vlastní cluster asi zvolíte buď Mesos nebo Kubernetes. Osobně asi budu volit Kubernetes, co vy?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker]]></title>
    <link href="http://blog.prskavec.net/2013/11/docker/"/>
    <updated>2013-11-28T08:25:00+01:00</updated>
    <id>http://blog.prskavec.net/2013/11/docker</id>
    <content type="html"><![CDATA[<p>Pokud se zajímáte o to jak nasazovat aplikace na svoje servery, pronajaté VPS nebo doc cloudu, měli by jste si něco o této poměrně mladé technologii přečíst nebo vidět.</p>

<h2>Co to je docker?</h2>

<p>Pěkně podrobně to najdete na samotném webu <a href="http://www.docker.io/the_whole_story/">docker.io</a> a také jsem to snažil postihnout ve své <a href="http://youtu.be/oZ86BoAUtSQ">přednášce na letošním Devfestu</a>.</p>

<iframe width="640" height="360" src="http://blog.prskavec.net//www.youtube.com/embed/oZ86BoAUtSQ?rel=0" frameborder="0" allowfullscreen></iframe>


<!-- more -->


<h2>Co se do přednášky nevešlo</h2>

<p>Všechny příklady, které jsem nestihl předvést naživo jsou v <a href="https://github.com/abtris/devfest-2013">repository</a> a jsou pro verzi 0.6.7 a mezi Devfestem a tímto článkem už stačila vyjít verze 0.7, která je revoluční v podpoře více distribucí (Fedora, RHEL, Ubuntu, Debian, Suse, Gentoo, Arch). Přidáný storage drivers o kterých jsem mluvil kromě AuFS je to VFS a DEVICEMAPPER a brzo budou další ZFS, Gluster, Ceph.</p>

<h2>Závěr</h2>

<p>Autoři slibují v další verzi se zaměřit hlavně na kvalitu, doplnění dokumentace a api. Je před nimi mnoho práce, ale čím dál více lidí docker používá i v produkci. O dockeru budu mluvit 13.12. také v rámci <a href="http://webovky.vse.cz/web-inkognito">Web Inkognito</a> a 3-4.12.2013 se koná celosvětový Docker <a href="http://www.meetup.com/Docker-Prague-Czech-Republic/events/152779712/">HackDay</a>, pokud by jste se chtěli zůčastnit nebo pomocí s organizací místa kde se to bude konat dejte vědět mě nebo organizátorům.</p>
]]></content>
  </entry>
  
</feed>
